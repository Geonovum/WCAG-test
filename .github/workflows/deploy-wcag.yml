name: WCAG + SEO check & Deploy to GitHub Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  wcag-seo-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Repo
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Node + pa11y
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Chrome/Puppeteer deps (Ubuntu 22.04/24.04 compatible)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 \
            libfontconfig1 libgbm1 libgcc1 libglib2.0-0 libgtk-3-0 \
            libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 \
            libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 \
            libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 \
            libxss1 libxtst6 ca-certificates fonts-liberation lsb-release \
            xdg-utils wget

      - name: Install pa11y locally
        run: npm install pa11y cheerio

      # 3) Serve de site (statisch, zonder build)
      - name: Start local server
        run: |
          npx serve -s . -l 3000 &
          npx wait-on http://localhost:3000/index.html

      # 4) E√©n loop: WCAG + SEO (errors falen; warnings/notices loggen)
      - name: Run combined WCAG 2.1 AA + SEO checks
        run: |
          node <<'EOF'
          const pa11y = require('pa11y');
          const { execSync } = require('child_process');
          const cheerio = require('cheerio');

          const siteDir = '.'; // pas aan bij submap
          const listCmd = `
            find "${siteDir}" -name "*.html" \
            -not -path "*/node_modules/*" \
            -not -path "*/dist/*" \
            -not -path "*/.next/*" \
            -not -path "*/.*/*"
          `;
          const htmlFiles = execSync(listCmd).toString().trim().split('\n').filter(Boolean);
          const common = {
            timeout: 30000,
            chromeLaunchConfig: { args: ['--no-sandbox','--disable-setuid-sandbox'] }
          };
          const wcagConfig = { ...common, standard: 'WCAG2AA', includeWarnings: true, includeNotices: true };
          const icon = (t) => t === 'error' ? 'üõë' : t === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';

          // Kleine helper om HTML van de live server te halen
          async function fetchHtml(url) {
            const res = await fetch(url);
            if (!res.ok) throw new Error(`HTTP ${res.status}`);
            return await res.text();
          }

          // Basale SEO-regels:
          // - <title> aanwezig (error als ontbreekt / leeg)
          // - <meta name="description"> aanwezig (error als ontbreekt; warning als <50 of >160 chars)
          // - <html lang> aanwezig (error als ontbreekt; warning als niet op simpele pattern past)
          // - <meta name="viewport"> aanwezig (warning als ontbreekt)
          // - <img> zonder alt ‚Üí warning (tellen en melden)
          // - <link rel="canonical"> aanbevolen ‚Üí warning als ontbreekt (optioneel)
          function seoCheck(url, html) {
            const $ = cheerio.load(html);
            const issues = [];

            const title = $('head > title').text().trim();
            if (!title) issues.push({ type: 'error', msg: '<title> ontbreekt of is leeg', sel: 'head > title' });

            const desc = $('head meta[name="description"]').attr('content')?.trim() || '';
            if (!desc) {
              issues.push({ type: 'error', msg: 'meta description ontbreekt', sel: 'meta[name="description"]' });
            } else if (desc.length < 50 || desc.length > 160) {
              issues.push({ type: 'warning', msg: `meta description lengte ${desc.length} (aanbevolen 50‚Äì160)`, sel: 'meta[name="description"]' });
            }

            const lang = $('html').attr('lang')?.trim();
            if (!lang) {
              issues.push({ type: 'error', msg: '<html lang> ontbreekt', sel: 'html' });
            } else if (!/^[a-z]{2}(-[A-Za-z]{2})?$/.test(lang)) {
              issues.push({ type: 'warning', msg: `<html lang="${lang}"> lijkt geen gangbare taalcode`, sel: 'html' });
            }

            const viewport = $('head meta[name="viewport"]').attr('content');
            if (!viewport) issues.push({ type: 'warning', msg: 'meta viewport ontbreekt (aanbevolen voor mobiel)', sel: 'meta[name="viewport"]' });

            const imgsNoAlt = $('img:not([alt]), img[alt=""], img[alt=null]').length;
            if (imgsNoAlt > 0) issues.push({ type: 'warning', msg: `${imgsNoAlt} <img>-element(en) zonder bruikbare alt`, sel: 'img' });

            const hasCanonical = $('head link[rel="canonical"]').length > 0;
            if (!hasCanonical) issues.push({ type: 'warning', msg: 'canonical link ontbreekt (aanbevolen)', sel: 'link[rel="canonical"]' });

            return issues;
          }

          (async () => {
            let failed = false;

            for (const file of htmlFiles) {
              const rel = file.replace(new RegExp(`^${siteDir}/?`), '');
              const url = `http://localhost:3000/${rel}`;
              console.log(`\n==========================\nüîé Checking: ${url}\n==========================`);

              // WCAG
              try {
                const wcag = await pa11y(url, wcagConfig);
                const e = wcag.issues.filter(i => i.type === 'error');
                const w = wcag.issues.filter(i => i.type === 'warning');
                const n = wcag.issues.filter(i => i.type === 'notice');
                if (wcag.issues.length === 0) {
                  console.log('‚úÖ WCAG: geen issues');
                } else {
                  console.log(`WCAG: ${e.length} errors, ${w.length} warnings, ${n.length} notices`);
                  wcag.issues.forEach(i => console.log(`${icon(i.type)} [WCAG/${i.type}] ${i.selector} ‚Üí ${i.message}`));
                  if (e.length > 0) failed = true;
                }
              } catch (err) {
                console.error(`‚ùå WCAG check crashte op ${url}:`, err.message || err);
                failed = true;
              }

              // SEO
              try {
                const html = await fetchHtml(url);
                const issues = seoCheck(url, html);
                if (issues.length === 0) {
                  console.log('‚úÖ SEO: geen issues');
                } else {
                  const e = issues.filter(i => i.type === 'error').length;
                  const w = issues.filter(i => i.type === 'warning').length;
                  console.log(`SEO: ${e} errors, ${w} warnings`);
                  issues.forEach(i => console.log(`${icon(i.type)} [SEO/${i.type}] ${i.sel} ‚Üí ${i.msg}`));
                  if (e > 0) failed = true;
                }
              } catch (err) {
                console.error(`‚ùå SEO check crashte op ${url}:`, err.message || err);
                failed = true;
              }
            }

            if (failed) {
              console.error('\n‚ùå Checks klaar: er zijn errors (WCAG en/of SEO).');
              process.exit(1);
            } else {
              console.log('\n‚úÖ Alle pagina‚Äôs: geen errors (warnings/notices kunnen nog bestaan).');
            }
          })();
          EOF

      # 5) Deploy naar gh-pages (publiceert de map . ‚Äî pas aan indien submap)
      - name: Deploy to GitHub Pages
        if: ${{ success() }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
