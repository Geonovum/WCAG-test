name: WCAG + SEO check & Deploy to GitHub Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  wcag-seo-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Repo
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Node + pa11y
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Chrome/Puppeteer deps (Ubuntu 22.04/24.04 compatible)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 \
            libfontconfig1 libgbm1 libgcc1 libglib2.0-0 libgtk-3-0 \
            libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 \
            libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 \
            libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 \
            libxss1 libxtst6 ca-certificates fonts-liberation lsb-release \
            xdg-utils wget

      - name: Install pa11y locally
        run: npm install pa11y

      # 3) Serve de site (statisch, zonder build)
      - name: Start local server
        run: |
          npx serve -s . -l 3000 &
          npx wait-on http://localhost:3000/index.html

      # 4) E√©n loop: WCAG + SEO (errors falen; warnings/notices loggen)
      - name: Run combined WCAG 2.1 AA + SEO checks
        run: |
          node <<'EOF'
          const pa11y = require('pa11y');
          const { execSync } = require('child_process');

          const siteDir = '.'; // pas aan als jouw HTML in submap staat
          const listCmd = `
            find "${siteDir}" -name "*.html" \
            -not -path "*/node_modules/*" \
            -not -path "*/dist/*" \
            -not -path "*/.next/*" \
            -not -path "*/.*/*"
          `;

          const htmlFiles = execSync(listCmd).toString().trim().split('\n').filter(Boolean);
          if (htmlFiles.length === 0) {
            console.log('‚ÑπÔ∏è Geen HTML-bestanden gevonden in de geselecteerde map. Controleer siteDir en uitsluitingen.');
          }

          const common = {
            timeout: 30000,
            chromeLaunchConfig: { args: ['--no-sandbox','--disable-setuid-sandbox'] }
          };

          // Configs
          const wcagConfig = {
            ...common,
            standard: 'WCAG2AA',
            includeWarnings: true,
            includeNotices: true
          };

          const seoConfig = {
            ...common,
            // we gebruiken WCAG baseline en voegen SEO-achtige checks toe
            standard: 'WCAG2AA',
            includeWarnings: true,
            includeNotices: true,
            rules: [
              'document-title',      // <title> aanwezig
              'meta-description',    // <meta name="description">
              'meta-viewport',       // viewport voor mobile
              'html-has-lang',       // <html lang="">
              'html-lang-valid',     // geldige taalcode
              'image-alt',           // alt-teksten
              'meta-refresh'         // vermijd meta refresh
            ]
          };

          const iconFor = (t) => t === 'error' ? 'üõë' : t === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';

          (async () => {
            let failed = false;

            for (const file of htmlFiles) {
              const relativePath = file.replace(new RegExp(`^${siteDir}/?`), '');
              const url = `http://localhost:3000/${relativePath}`;
              console.log(`\n==========================\nüîé Checking: ${url}\n==========================`);

              // --- WCAG ---
              try {
                const wcag = await pa11y(url, wcagConfig);
                const e = wcag.issues.filter(i => i.type === 'error');
                const w = wcag.issues.filter(i => i.type === 'warning');
                const n = wcag.issues.filter(i => i.type === 'notice');

                if (wcag.issues.length === 0) {
                  console.log('‚úÖ WCAG: geen issues');
                } else {
                  console.log(`WCAG resultaat: ${e.length} errors, ${w.length} warnings, ${n.length} notices`);
                  for (const i of wcag.issues) {
                    console.log(`${iconFor(i.type)} [WCAG/${i.type}] ${i.selector} ‚Üí ${i.message}`);
                  }
                  if (e.length > 0) failed = true; // alleen errors laten falen
                }
              } catch (err) {
                console.error(`‚ùå WCAG check crashte op ${url}:`, err.message || err);
                failed = true;
              }

              // --- SEO ---
              try {
                const seo = await pa11y(url, seoConfig);
                const e = seo.issues.filter(i => i.type === 'error');
                const w = seo.issues.filter(i => i.type === 'warning');
                const n = seo.issues.filter(i => i.type === 'notice');

                if (seo.issues.length === 0) {
                  console.log('‚úÖ SEO: geen issues');
                } else {
                  console.log(`SEO resultaat: ${e.length} errors, ${w.length} warnings, ${n.length} notices`);
                  for (const i of seo.issues) {
                    console.log(`${iconFor(i.type)} [SEO/${i.type}] ${i.selector} ‚Üí ${i.message}`);
                  }
                  if (e.length > 0) failed = true; // alleen errors laten falen
                }
              } catch (err) {
                console.error(`‚ùå SEO check crashte op ${url}:`, err.message || err);
                failed = true;
              }
            }

            if (failed) {
              console.error('\n‚ùå Checks klaar: er zijn errors gevonden (WCAG en/of SEO).');
              process.exit(1);
            } else {
              console.log('\n‚úÖ Alle pagina‚Äôs: geen errors in WCAG of SEO (warnings/notices kunnen nog wel bestaan).');
            }
          })();
          EOF

      # 5) Deploy naar gh-pages (publiceert de map . ‚Äî pas aan indien submap)
      - name: Deploy to GitHub Pages
        if: ${{ success() }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
